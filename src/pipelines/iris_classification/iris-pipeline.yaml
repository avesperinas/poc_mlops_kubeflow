# PIPELINE DEFINITION
# Name: iris-pipeline
# Description: A simple pipeline to classify Iris flowers.
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        x_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_test:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    outputDefinitions:
      artifacts:
        output_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-test-split:
    executorLabel: exec-train-test-split
    inputDefinitions:
      artifacts:
        input_data:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        x_test_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        x_train_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_test_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_train_output:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-training-basic-classifier:
    executorLabel: exec-training-basic-classifier
    inputDefinitions:
      artifacts:
        x_train_input:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        y_train_input:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        metrics_output:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        model_output:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(\n    model: Input[Model],\n    x_test: Input[Dataset],\n\
          \    y_test: Input[Dataset],\n    metrics: Output[Metrics],\n):\n    import\
          \ joblib\n    import pandas as pd\n    import numpy as np\n    import pickle\n\
          \    from sklearn.metrics import accuracy_score, precision_score, recall_score,\
          \ f1_score, confusion_matrix\n    from sklearn.metrics import classification_report,\
          \ roc_curve, auc\n    import os\n\n    # Load the model and data\n    clf\
          \ = joblib.load(model.path)\n\n    x_test_df = pd.read_csv(x_test.path)\n\
          \    y_test_df = pd.read_csv(y_test.path)\n    y_true = y_test_df.iloc[:,\
          \ 0].values\n\n    # Make predictions and calculate metrics\n    y_pred\
          \ = clf.predict(x_test_df)\n    y_pred_proba = clf.predict_proba(x_test_df)\n\
          \n    accuracy = accuracy_score(y_true, y_pred)\n    precision = precision_score(y_true,\
          \ y_pred, average='weighted')\n    recall = recall_score(y_true, y_pred,\
          \ average='weighted')\n    f1 = f1_score(y_true, y_pred, average='weighted')\n\
          \n    # Save metrics to output\n    metrics_dict = {\n        \"accuracy\"\
          : float(accuracy),\n        \"precision\": float(precision),\n        \"\
          recall\": float(recall),\n        \"f1_score\": float(f1)\n    }\n    metrics.log_metrics(metrics_dict)\n\
          \n    print(f\"Model evaluation completed successfully with accuracy: {accuracy:.4f}\"\
          )\n\n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(output_data: Output[Dataset]):\n    import pandas\
          \ as pd\n    from sklearn import datasets\n\n    # Load dataset\n    iris\
          \ = datasets.load_iris()\n    df = pd.DataFrame(iris.data, columns=iris.feature_names)\n\
          \    df['species'] = iris.target\n    df = df.dropna()\n\n    # Save DataFrame\
          \ as CSV using the output artifact\n    df.to_csv(output_data.path, index=False)\n\
          \n    print(f\"Data saved as artifact: {output_data.path}\")\n\n"
        image: python:3.9
    exec-train-test-split:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_test_split
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_test_split(\n    input_data: Input[Dataset],\n    x_train_output:\
          \ Output[Dataset],\n    x_test_output: Output[Dataset],\n    y_train_output:\
          \ Output[Dataset],\n    y_test_output: Output[Dataset],\n):\n    import\
          \ pandas as pd\n    from sklearn.model_selection import train_test_split\n\
          \n    # Load data from the input artifact\n    final_data = pd.read_csv(input_data.path)\n\
          \n    target_column = 'species'\n    x = final_data.loc[:, final_data.columns\
          \ != target_column]\n    y = final_data[target_column]\n\n    x_train, x_test,\
          \ y_train, y_test = train_test_split(x, y, test_size=0.3, stratify=y, random_state=47)\n\
          \n    # Save the datasets as artifacts\n    x_train.to_csv(x_train_output.path,\
          \ index=False)\n    x_test.to_csv(x_test_output.path, index=False)\n   \
          \ pd.DataFrame(y_train).to_csv(y_train_output.path, index=False)\n    pd.DataFrame(y_test).to_csv(y_test_output.path,\
          \ index=False)\n\n    print(x_train_output.path)\n    print(x_test_output.path)\n\
          \    print(y_train_output.path)\n    print(y_test_output.path)\n\n    print(\"\
          Train-test split completed successfully\")\n\n"
        image: python:3.9
    exec-training-basic-classifier:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - training_basic_classifier
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.12.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ 'joblib' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef training_basic_classifier(\n    x_train_input: Input[Dataset],\n\
          \    y_train_input: Input[Dataset],\n    model_output: Output[Model],\n\
          \    metrics_output: Output[Metrics],\n):\n    import pandas as pd\n   \
          \ from sklearn.linear_model import LogisticRegression\n    import joblib\n\
          \n    # Load training data\n    x_train = pd.read_csv(x_train_input.path)\n\
          \    y_train = pd.read_csv(y_train_input.path).iloc[:, 0]\n\n    # Train\
          \ the model\n    classifier = LogisticRegression(max_iter=500)\n    classifier.fit(x_train,\
          \ y_train)\n\n    # Save the trained model\n    joblib.dump(classifier,\
          \ model_output.path)\n\n    # Log some metrics (example)\n    train_score\
          \ = classifier.score(x_train, y_train)\n    metrics_output.log_metric(\"\
          train_accuracy\", train_score)\n\n    print(f\"Model trained with training\
          \ accuracy: {train_score}\")\n\n"
        image: python:3.9
pipelineInfo:
  description: A simple pipeline to classify Iris flowers.
  name: iris-pipeline
root:
  dag:
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - train-test-split
        - training-basic-classifier
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model_output
                producerTask: training-basic-classifier
            x_test:
              taskOutputArtifact:
                outputArtifactKey: x_test_output
                producerTask: train-test-split
            y_test:
              taskOutputArtifact:
                outputArtifactKey: y_test_output
                producerTask: train-test-split
        taskInfo:
          name: evaluate-model
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        taskInfo:
          name: prepare-data
      train-test-split:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-test-split
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            input_data:
              taskOutputArtifact:
                outputArtifactKey: output_data
                producerTask: prepare-data
        taskInfo:
          name: train-test-split
      training-basic-classifier:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-training-basic-classifier
        dependentTasks:
        - train-test-split
        inputs:
          artifacts:
            x_train_input:
              taskOutputArtifact:
                outputArtifactKey: x_train_output
                producerTask: train-test-split
            y_train_input:
              taskOutputArtifact:
                outputArtifactKey: y_train_output
                producerTask: train-test-split
        taskInfo:
          name: training-basic-classifier
schemaVersion: 2.1.0
sdkVersion: kfp-2.12.1
